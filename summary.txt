
After learning this “PID Control” lesson and completing the project, here’s my preliminary understanding of the three important parameters, Kp, Ki, and Kd:
	- First, Kp is the proportion parameter. With Kp, the final control strength gets a component that is proportional to the error. The bigger it is, the more quickly the system responses to the error. Kp is the basic, or intuitive response to the error. But with Kp only, system will oscillate around the control target value.
	- Second, Kd is the parameter corresponding to the differential component, i.e. a control component calculated based on how the error is changing. The quickly the error changes, the bigger the control strength from this component. With Kd, when error is becoming smaller, the control strength becomes even smaller than without Kd, and vise versa. The main purpose of Kd of to reduce or oscillation.
	- Third, Ki is the parameter connected with the accumulated error. When a system has consistent accumulated error, this parameter will having effect through the integral component. Ki is introduced when system has a systematic bias. Without Ki, system tends to stabilize at some offset of the target value because of the bias. Ki can eliminate that offset.

Based on my understanding of these parameters, this is how I find out and tune the parameters used in this project. I first set Pd and Pi to zero, and find out a “usable” Kp first, starting from some small numbers, like 0.1. “usable” means that, with that parameter set, the car should have a reasonable response to errors on the track, i.e. when it is off the center of the road, there should be some force pushing it back, and the force can’t be too large or too small (in both cases, the car would end up running off road). On a straight lane or a lane with little curvature, the car should be able to go without big issue, except some small oscillation around the center. With Kp set, I then start to add in Kd, also starting with a small number. With Kd, if I can see the the car is driving better, farther,  and with less oscillation, then I can increase or decrease Kd a little bit and try to find a better value. After I repeat these two steps for several cycles, the car basically can drive a complete round, although not so perfectly. At this point, I try to find out Ki that can improve the performance further. The way I measure how well the car is performing is to calculate the mean squared CTE value in a round, ignoring the very first part, say, from step 300 ~ 1000. With the measurement built in, I can compare the results of different parameter combinations. The basic idea to fine tune the parameters is same as “twiddle”, but I just do it manually, which is more quickly, in my opinion, because I can choose different change steps for different parameters and watch the car’s behavior after the change. The fine tuning ends when there’s no obvious improvement seen any more.

Some key points:
	- Speed needs to be constant. PID parameters basically are strongly connected with speed. One set of parameters may not work at all when speed changes. I used a simple P-controller to control the throttling to keep the car at a constant speed. Otherwise, it may not even possible to compare the performance of different parameters. At the beginning, I didn’t set speed, I found there are so many different options for the car to be able to driver without running off road. For example, when I set very big P and D parameters, the car also stays on the road, but the speed is only 7 ~ 8 mile/hour.
	- Before measuring the mean square error, make the car driver first. I.e. at least after the car can stay on the track, then start to measuring the performance or doing fine tuning.
	- Start with Kp first, then Kd, and in the end, Ki. Start with smaller values first.

I have two sets of parameters in my code, one for 30 mile/h, and one for 50 mile/h. I found with fixed speed,  it’ll be much hard to increase the speed further because at those sharp turns, the car almost runs out of road. I couldn’t find a set of working parameters following steps above if I set the car’s speed at 70 mile/h.  I think, some advanced control algorithms are needed, to use different parameters for different speeds, and adjust speed based on the curvature of the road.

